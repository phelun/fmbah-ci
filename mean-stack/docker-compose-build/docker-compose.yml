version: '3'

services: 
  nodejs: 
    build:                                               # Defines Configuration Options
      context: .                                         # Defines Current Directory As Image Build Context 
      dockerfile: Dockerfile                             # Defines Existing Dockerfile TO Use For Our Image  
    image: nodjs                                         # Gives The Image|Container A Name     
    container_name: nodejs 
    restart: unless-stopped 
    env_file: .env                                       # Defines Source Of Environment Variables 
    environment:                                         # Corrrelates with .env file to fetch values for the Env Vars 
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=db 
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
    ports: 
      - "80:8080"
    volumes:                                             # Defined 2 types of mounts here 
      - .:/home/node/app                                 # "bind mount" that mounts our app code on the host to the ../app dir on the container
      - node_modules:/home/node/app/node_modules        # "Named Vol"
    networks: 
      - app-network
    command: ./wait-for.sh db:27017 -- /home/node/app/node_modules/.bin/nodemon app.js
  db:
    image: mongo:4.1.8-xenial
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:  
      - dbdata:/data/db                                 # The named volume dbdata will persist the data stored in Mongo’s default data directory, /data/db. This will ensure that you don’t lose data in cases where you stop or remove containers
    networks:
      - app-network  
networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
  node_modules: 